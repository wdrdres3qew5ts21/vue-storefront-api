version: '3.0'
# เราจำเป็นต้องกำหนดชื่อของ service ที่จะสั่งให้ทำงาน
services:
  es1: #ชื่อของ container จะตั้งตาม root ของ folder ตามด้วยชื่อของ service เสมอ dirname_servicename
    container_name: elasticsearch # ตั้งชื่อของ host container จริงๆที่จะถูกเรียกใช้ในวง network ของ docker-compose
    build: docker/elasticsearch/ # บังคับใช้ dockerfile ที่อยู่ใน path local ของ host machine เราแทนที่จะใช้ image บน cloud
    volumes: # ทำการ mount data จาก host_machine:container_machine การแก้ไขจากภายในและภายนอกจะส่งผลสองฝั่ง
      - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./docker/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
      - '9300:9300'
    environment: # ทำการ inject env ตามตัวแปรที่ตั้งค่าไว้
      ES_JAVA_OPTS: "-Xmx512m -Xms512m" # ตั้ง memory ของตัว java virtual macine ตาม best practice ของ elasticsearch
    networks: # เป็นการบังคับบอกว่า container นี้จะต้องอยู่ในวง network ใดแทนที่จะใช้ default network คือ bridge network
      - 'magento2_production_default' # ชื่อ network นี้สร้างจาก docker-compose ของ docker-compsoe magento

  kibana:
    build: docker/kibana/ 
    volumes:
      - ./docker/kibana/config/:/usr/share/kibana/config:ro
    ports:
      - '5601:5601'
    depends_on:
      - es1
    networks: 
      - 'magento2_production_default'

  redis:
    image: 'redis:4-alpine'
    ports:
      - '6379:6379'
    networks: 
      - 'magento2_production_default' # ชื่อ network นี้สร้างจาก docker-compose ของ docker-compsoe magento

networks:  # ตั้งว่าให้ container ที่ใช้ชื่อวง network นี้จะใช้ network ที่มีอยู่แล้ว
  magento2_production_default: 
    external: true 

volumes: # volume แบบใช้ในตัว dcoker machine ให้จัดการเอง
  esdat1:
